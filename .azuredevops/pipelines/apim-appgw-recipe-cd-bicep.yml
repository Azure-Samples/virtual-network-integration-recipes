# The following variables should be set in the pipeline:
# - AZURE_DEVOPS_AGENT_POOL
# - AZURE_SERVICE_CONNECTION
# - APIM_PUBLISHER_EMAIL
# - customDomain
# - gatewayCustomDomainHostname
# - portalCustomDomainHostname
# - managementCustomDomainHostname
# - gatewayCustomDomainCertificate
# - portalCustomDomainCertificate
# - managementCustomDomainCertificate
# - trustedRootCertificate

trigger: none
pr: none
resources:
  pipelines:
    - pipeline: apimAppGatewayCI
      source: 'APIM + App Gateway Recipe CI'
      trigger: 
        branches:
          include:
          - main

name: 'APIM + App Gateway Recipe CD - Bicep'

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: Deploy
    displayName: Deploy

    jobs:
      - job: DeployBicep
        timeoutInMinutes: 360
        displayName: Deploy Bicep Files
        variables:
        - template: variables/apim-appgw-recipe-bicep.yml

        steps:
          - template: ./templates/bicep-deploy.yml
            parameters:
              bicepPath: ./src/az-webapp-apim-appgw/deploy/bicep/main.bicep
              bicepParameters: 'location=$(location) resourceBaseName=$(resourceBaseName) apiManagementPublisherName=$(apimPublisherName) apiManagementPublisherEmailAddress=$(APIM_PUBLISHER_EMAIL) apiManagementCustomDnsName=$(CUSTOMDOMAIN) apiManagementPortalCustomHostname=$(PORTALCUSTOMDOMAINHOSTNAME) apiManagementProxyCustomHostname=$(GATEWAYCUSTOMDOMAINHOSTNAME) apiManagementManagementCustomHostname=$(MANAGEMENTCUSTOMDOMAINHOSTNAME) apiManagementPortalCustomHostnameBase64EncodedPfxCertificate=$(PORTALCUSTOMDOMAINCERTIFICATE) apiManagementProxyCustomHostnameBase64EncodedPfxCertificate=$(GATEWAYCUSTOMDOMAINCERTIFICATE) apiManagementManagementCustomHostnameBase64EncodedPfxCertificate=$(MANAGEMENTCUSTOMDOMAINCERTIFICATE) applicationGatewayTrustedRootBase64EncodedPfxCertificate=$(TRUSTEDROOTCERTIFICATE) dnsZoneResourceGroupName=$(operationsResourceGroupName) newOrExistingDnsZones=$(newOrExistingDnsZones) virtualNetworkAddressPrefix=$(vnetAddressPrefix) virtualNetworkAppServiceIntegrationSubnetAddressPrefix=$(vnetSubnetAppServiceIntegrationAddressPrefix) virtualNetworkPrivateEndpointSubnetAddressPrefix=$(vnetSubnetPrivateEndpointAddressPrefix)'
              serviceConnection: $(AZURE_SERVICE_CONNECTION)

          - template: ./templates/vnet-peering.yml
            parameters:
              azureSubscription: $(AZURE_SERVICE_CONNECTION)
              sourceResourceGroupName: $(resourceGroupName)
              targetResourceGroupName: $(operationsResourceGroupName)
              targetVirtualNetworkName: $(operationsVirtualNetworkName)
              infraSourceType: bicep

          - task: Bash@3
            displayName: "Pull Azure Web App Name From Outputs"
            name: retrieveBicepOutputVariables
            inputs:
              targetType: 'inline'
              workingDirectory: "$(Pipeline.Workspace)/bicep"
              script: |
                webAppName=$(jq -r '.properties.outputs.webAppName.value' outputs.json)
                echo "Web App name: $webAppName"
                echo "##vso[task.setvariable variable=azureWebAppName;isOutput=true]$webAppName"

                webAppPlanName=$(jq -r '.properties.outputs.webAppPlanName.value' outputs.json)
                echo "Web App plan name: $webAppPlanName"
                echo "##vso[task.setvariable variable=azureWebAppPlanName;]$webAppPlanName"

          # Default value in src/common/infrastructure/bicep/web-app.bicep is to set a P1v3 web app.
          # Azure doc at https://docs.microsoft.com/en-us/azure/app-service/overview-vnet-integration#limitations
          # indicates to create a Premium v3 plan and scale to a lower tier plan to ensure plan is on
          # newer deployment/infrastructure. Thus, starting with P1v3 and scaling down to B1 in the pipeline.
          - task: AzureCLI@2
            displayName: Change App Service Plan SKU
            inputs:
              azureSubscription: $(AZURE_SERVICE_CONNECTION)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az appservice plan update \
                  --resource-group '$(resourceGroupName)' \
                  --name '$(azureWebAppPlanName)' \
                  --sku 'B1'
                  
      - job: DeployAzureWebApp
        dependsOn: DeployBicep
        displayName: Deploy Azure Web App
        pool:
          name: $(AZURE_DEVOPS_AGENT_POOL)
        variables:
        - template: variables/apim-appgw-recipe-bicep.yml
        - name: azureWebAppName
          value: $[ dependencies.DeployBicep.outputs['retrieveBicepOutputVariables.azureWebAppName'] ]

        steps:
          - template: ./templates/dotnet-build.yml
            parameters: 
              sourceCodePath: '**/src/common/app_code/WeatherForecastAPI/*.csproj'
              testCodePath: ''
              buildConfiguration: 'Release'
              codeCoverageThreshold: '$(codeCoverageThreshold)'

          - task: DownloadPipelineArtifact@2
            displayName: "Download Web App Artifact"
            inputs:
              buildType: "current"
              artifact: "dotnetArtifact"
              targetPath: "$(Pipeline.Workspace)/dotnetArtifact"

          - task: DownloadPipelineArtifact@2
            displayName: "Download Bicep Artifact"
            inputs:
              buildType: "current"
              artifact: "bicep"
              targetPath: "$(Pipeline.Workspace)/bicep"

          - task: AzureRMWebAppDeployment@4
            displayName: Deploy Web App
            inputs:
              WebAppName: '$(azureWebAppName)'
              ResourceGroupName: '$(resourceGroupName)'
              azureSubscription: $(AZURE_SERVICE_CONNECTION)
              Package: '$(Pipeline.Workspace)/dotnetArtifact/WeatherForecastAPI.zip'