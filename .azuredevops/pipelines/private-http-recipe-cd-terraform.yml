# The following variables should be set in the pipeline:
# AZURE_SERVICE_CONNECTION
# AZURE_DEVOPS_AGENT_POOL

trigger: none
pr: none
resources:
  pipelines:
    - pipeline: funcHttpCIPipeline
      source: 'Private HTTP Recipe CI'
      trigger: 
        branches:
          include:
          - main

name: 'Private HTTP Recipe CD - Terraform'

pool: 
  vmImage: 'ubuntu-latest'

stages:
  - stage: Deploy
    displayName: Deploy
    
    jobs:
      - job: DeployTerraform
        displayName: Deploy Terraform Files
        variables:
        - template: variables/private-http-recipe-terraform.yml
        steps:
          - template: ./templates/terraform-deploy.yml
            parameters:
              terraformPath: ./src/az-func-http/deploy/terraform
              terraformVariables: '-var "resource_group_name=$(resourceGroupName)" -var "dns_zone_resource_group_name=$(operationsResourceGroupName)" -var "newOrExistingDnsZones=$(newOrExistingDnsZones)" -var "resourceBaseName=$(resourceBaseName)" -var "vnet_address_prefix=$(vnetAddressPrefix)" -var "vnet_subnet_app_service_integration_address_prefixes=$(vnetSubnetAppServiceIntegrationAddressPrefix)" -var "vnet_subnet_private_endpoints_address_prefixes=$(vnetSubnetPrivateEndpointAddressPrefix)" -var "location=$(location)" -var "tags=$(tags)"'
              serviceConnection: $(AZURE_SERVICE_CONNECTION)
              tfStateResourceGroupName: $(tfStateResourceGroupName)
              tfStateStorageAccountName: $(tfStateStorageAccountName)
              tfStateContainerName: $(tfStateContainerName)
              tfStateFileName: '$(tfStateFileName)'
          - template: ./templates/vnet-peering.yml
            parameters:
              azureSubscription: $(AZURE_SERVICE_CONNECTION)
              sourceResourceGroupName: $(resourceGroupName)
              targetResourceGroupName: $(operationsResourceGroupName)
              targetVirtualNetworkName: $(operationsVirtualNetworkName)
              infraSourceType: terraform
      - job: DeployAzureFunction
        dependsOn: DeployTerraform
        displayName: Deploy Azure Function
        pool:
          name: $(AZURE_DEVOPS_AGENT_POOL)
        variables:
        - template: variables/private-http-recipe-terraform.yml
        steps:
          - template: ./templates/python-build.yml
            parameters: 
              sourceCodePath: 'src/common/app_code/http-trigger'
          - task: DownloadPipelineArtifact@2
            displayName: "Download Function Artifact"
            inputs:
              buildType: "current"
              artifact: "pythonArtifact"
              targetPath: "$(Pipeline.Workspace)/pythonArtifact"
          - task: DownloadPipelineArtifact@2
            displayName: "Download Terraform Artifact"
            inputs:
              buildType: "current"
              artifact: "terraform"
              targetPath: "$(Pipeline.Workspace)/terraform"
          - task: Bash@3
            displayName: "Pull Azure Function App Name From Outputs"
            inputs:
              targetType: 'inline'
              workingDirectory: "$(Pipeline.Workspace)/terraform"
              script: |
                functionName=$(jq -r '.function_app_name.value' outputs.json)
                echo "##vso[task.setvariable variable=azureFunctionName;]$functionName"
          - task: AzureFunctionApp@1
            displayName: Deploy Azure Function App
            inputs:
              appType: 'functionApp'
              appName: '$(azureFunctionName)'
              resourceGroupName: '$(resourceGroupName)'
              azureSubscription: $(AZURE_SERVICE_CONNECTION)
              package: '$(Pipeline.Workspace)/pythonArtifact/http-trigger.zip'
              deploymentMethod: 'runFromPackage'