# The following variables should be set in the pipeline:
# - AZURE_SERVICE_CONNECTION
# - AZURE_DEVOPS_AGENT_POOL
# - vmAdminPassword
# - vmAdminUsername

trigger: none
pr: none
resources:
  pipelines:
    - pipeline: webappHttpCIPipeline
      source: 'Web App Private HTTP Recipe CI'
      trigger: 
        branches:
          include:
          - main

name: 'Web App Private HTTP Recipe CD - Terraform'

pool: 
  vmImage: 'ubuntu-latest'

stages:
  - stage: Deploy
    displayName: Deploy
    
    jobs:
      - job: DeployTerraform
        displayName: Deploy Terraform Files
        variables:
        - template: variables/webapp-private-http-recipe-terraform.yml
        steps:
          - template: ./templates/terraform-deploy.yml
            parameters:
              terraformPath: ./src/az-webapp-http/deploy/terraform
              terraformVariables: '-var "resource_group_name=$(resourceGroupName)" -var "dns_zone_resource_group_name=$(operationsResourceGroupName)" -var "newOrExistingDnsZones=$(newOrExistingDnsZones)" -var "resourceBaseName=$(resourceBaseName)" -var "vnet_address_prefix=$(vnetAddressPrefix)" -var "vnet_subnet_app_service_integration_address_prefixes=$(vnetSubnetAppServiceIntegrationAddressPrefix)" -var "vnet_subnet_private_endpoints_address_prefixes=$(vnetSubnetPrivateEndpointAddressPrefix)" -var "location=$(location)" -var "tags=$(tags)"'
              serviceConnection: $(AZURE_SERVICE_CONNECTION)
              tfStateResourceGroupName: $(tfStateResourceGroupName)
              tfStateStorageAccountName: $(tfStateStorageAccountName)
              tfStateContainerName: $(tfStateContainerName)
              tfStateFileName: '$(tfStateFileName)'

          - template: ./templates/vnet-peering.yml
            parameters:
              azureSubscription: $(AZURE_SERVICE_CONNECTION)
              sourceResourceGroupName: $(resourceGroupName)
              targetResourceGroupName: $(operationsResourceGroupName)
              targetVirtualNetworkName: $(operationsVirtualNetworkName)
              infraSourceType: terraform

          # Default value in src/common/infrastructure/terraform/modules/azure-app-service/variables.tf is to
          # set a PremiumV3 web app.
          # Azure doc at https://docs.microsoft.com/en-us/azure/app-service/overview-vnet-integration#limitations
          # indicates to create a Premium v3 plan and scale to a lower tier plan to ensure plan is on
          # newer deployment/infrastructure. Thus, starting with P1v3 and scaling down to B1 in the pipeline.
          - task: Bash@3
            displayName: "Pull Azure Web App Name From Outputs"
            name: retrieveTerraformOutputVariables
            inputs:
              targetType: 'inline'
              workingDirectory: "$(Pipeline.Workspace)/terraform"
              script: |
                webAppName=$(jq -r '.web_app_name.value' outputs.json)
                echo "##vso[task.setvariable variable=azureWebAppName;isOutput=true]$webAppName"
                echo "Web App name: $webAppName"

                webAppPlanName=$(jq -r '.web_app_plan_name.value' outputs.json)
                echo "Web App plan name: $webAppPlanName"
                echo "##vso[task.setvariable variable=azureWebAppPlanName;]$webAppPlanName"

          - task: AzureCLI@2
            displayName: Change App Service Plan SKU
            inputs:
              azureSubscription: $(AZURE_SERVICE_CONNECTION)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az appservice plan update \
                  --resource-group '$(resourceGroupName)' \
                  --name '$(azureWebAppPlanName)' \
                  --sku 'B1'

      - job: DeployAzureWebApp
        dependsOn: DeployTerraform
        displayName: Deploy Azure Web App
        pool:
          name: $(AZURE_DEVOPS_AGENT_POOL)
        variables:
        - template: variables/webapp-private-http-recipe-terraform.yml
        - name: azureWebAppName
          value: $[ dependencies.DeployTerraform.outputs['retrieveTerraformOutputVariables.azureWebAppName'] ]

        steps:
          - template: ./templates/dotnet-build.yml
            parameters: 
              sourceCodePath: '**/src/common/app_code/WeatherForecastAPI/*.csproj'
              testCodePath: ''
              buildConfiguration: 'Release'
              codeCoverageThreshold: '$(codeCoverageThreshold)'

          - task: DownloadPipelineArtifact@2
            displayName: "Download Web App Artifact"
            inputs:
              buildType: "current"
              artifact: "dotnetArtifact"
              targetPath: "$(Pipeline.Workspace)/dotnetArtifact"

          - task: DownloadPipelineArtifact@2
            displayName: "Download Terraform Artifact"
            inputs:
              buildType: "current"
              artifact: "terraform"
              targetPath: "$(Pipeline.Workspace)/terraform"

          - task: AzureRMWebAppDeployment@4
            displayName: Deploy Web App
            inputs:
              WebAppName: '$(azureWebAppName)'
              ResourceGroupName: '$(resourceGroupName)'
              azureSubscription: $(AZURE_SERVICE_CONNECTION)
              Package: '$(Pipeline.Workspace)/dotnetArtifact/WeatherForecastAPI.zip'
         